type Subscription {
  cellOrder: CellOrderEvent!
  cellSource: CellSourceEvent!
}

type CellSourceEvent {
  id: ID!
  type: DiffType!
  diff: String
  start1: Int
  len1: Int
  start2: Int
  len2: Int
}

interface ICellOrderEvent {
  id: ID
}

type CellInsertedEvent implements ICellOrderEvent {
  id: ID!
  pos: Int!
}

type CellRemovedEvent implements ICellOrderEvent {
  id: ID
  pos: Int!
}

type CellMovedEvent implements ICellOrderEvent {
  id: ID!
  pos1: Int!
  pos2: Int!
}

type CellReplacedEvent implements ICellOrderEvent {
  id: ID!
  local: Boolean
}

union CellOrderEvent = CellInsertedEvent | CellRemovedEvent | CellMovedEvent | CellReplacedEvent
