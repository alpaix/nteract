type Mutation {
  upsertNotebook(input: UpsertNotebookInput!): UpsertNotebookPayload!
  insertCell(input: InsertCellInput!): Cell!
  deleteCell(id: ID!): Boolean
  patchCellSource(input: PatchCellSourceInput!): Boolean
}

input UpsertNotebookInput {
  filePath: String!
  content: NotebookContentInput!
}

input NotebookContentInput {
  cells: [CellInput!]
  metadata: [MetadataInput!]
}

input CellInput {
  code: CodeCellInput
  markdown: TextCellInput
  raw: TextCellInput
}

input CodeCellInput {
  source: String!
  metadata: [MetadataInput!]
  executionCount: Int
  outputs: [OutputInput!]
}

input TextCellInput {
  source: String!
  metadata: [MetadataInput!]
}

input MetadataInput {
  name: String!
  value: String!
}

input MediaBundleInput {
  name: String!
  value: String!
}

input OutputInput {
  executeResult: ExecuteResultInput
  displayData: DisplayDataInput
  stream: StreamOutputInput
  error: ErrorOutputInput
}

input ExecuteResultInput {
  executionCount: Int
  data: [MediaBundleInput!]
  metadata: [MetadataInput!]
}

input DisplayDataInput {
  data: [MediaBundleInput!]
  metadata: [MetadataInput!]
}

input StreamOutputInput {
  name: OutputStreamType
  text: String
}

enum OutputStreamType {
  stdout
  stderr
}

input ErrorOutputInput {
  ename: String
  evalue: String
  traceback: [String!]
}

type UpsertNotebookPayload {
  notebook: Notebook
}

input InsertCellInput {
  insertAt: Int
  cell: CellInput!
}

enum CellType {
  code
  markdown
  raw
}

enum DiffType {
  insert
  delete
  replace
}

input PatchCellSourceInput {
  id: ID!
  type: DiffType!
  diff: String
  start1: Int
  len1: Int
  start2: Int
  len2: Int
}
