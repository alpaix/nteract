"""
The query root of Jupyter Notebook GraphQL interface.
"""
type Query {
  """
  Lookup a given notebook by the file path.
  """
  notebook(id: ID!): Notebook
}

type Notebook {
  id: ID!
  """
  List of cells
  """
  cells(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CellConnection!

  """
  Retrieve an individual cell given its unique ID
  """
  cell(id: ID!): Cell

  metadata: [MetadataEntry!]
}

type MetadataEntry {
  key: String!
  value: String
}

interface ICell {
  id: ID!
  source: String
  metadata: [MetadataEntry!]
}

type CodeCell implements ICell {
  id: ID!
  source: String
  metadata: [MetadataEntry!]
  executionCount: Int
  outputs: [CellOutput!]
}

type MarkdownCell implements ICell {
  id: ID!
  source: String
  metadata: [MetadataEntry!]
}

type RawCell implements ICell {
  id: ID!
  source: String
  metadata: [MetadataEntry!]
}

union Cell = CodeCell | MarkdownCell | RawCell

union CellOutput = DisplayData | ErrorOutput | ExecuteResult | StreamOutput

type ExecuteResult {
  executionCount: Int
  data: [MediaBundleEntry!]
  metadata: [MetadataEntry!]
}

type DisplayData {
  data: [MediaBundleEntry!]
  metadata: [MetadataEntry!]
}

type StreamOutput {
  name: OutputStreamType
  text: String
}

enum OutputStreamType {
  stdout
  stderr
}

type ErrorOutput {
  ename: String
  evalue: String
  traceback: [String!]
}

type MediaBundleEntry {
  key: String!
  value: String
}

"""
An edge in a connection.
"""
type CellEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Cell
}

type PageInfo {
  a: String
}

"""
The connection type for Cell.
"""
type CellConnection {
  """
  A list of edges.
  """
  edges: [CellEdge]

  """
  A list of nodes.
  """
  nodes: [Cell]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
